import { createChatCompletion } from '../ai/aiClient';
import logger from '../../utils/logger';

interface TextConfig {
  minWords?: number;
  maxWords?: number;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  sourceLanguage?: 'spanish' | 'english' | 'portuguese';  // Language of the generated text
  targetLanguage?: 'spanish' | 'english' | 'portuguese';  // Language user will translate TO
  mustUseWords?: string[];
  grammarTopics?: string[];
  topic?: string;
}

/**
 * Generate training text using OpenAI
 */
export const generateTrainingText = async (config: TextConfig = {}) => {
  try {
    const {
      minWords = 120,
      maxWords = 700,
      difficulty = 'intermediate',
      sourceLanguage = 'spanish',  // Default: generate in Spanish
      targetLanguage = 'english',  // Default: translate to English
      mustUseWords = [],
      grammarTopics = [],
      topic = 'general'
    } = config;

    logger.info('Generating training text with OpenAI', { config });

    // Build prompt for text generation
    const prompt = buildTextGenerationPrompt({
      minWords,
      maxWords,
      difficulty,
      sourceLanguage,
      targetLanguage,
      mustUseWords,
      grammarTopics,
      topic
    });

    logger.info('Generated prompt for OpenAI:', { prompt });

    const response = await createChatCompletion({
      messages: [
        {
          role: 'system',
          content: 'You are a language learning assistant that generates texts for translation practice.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7
    });

    const generatedText = response.choices[0]?.message?.content?.trim();

    if (!generatedText) {
      throw new Error('No text generated by AI service');
    }

    logger.info('Training text generated successfully', { 
      wordCount: generatedText.split(' ').length,
      sourceLanguage,
      targetLanguage,
      difficulty 
    });

    return {
      id: `text-${Date.now()}`,
      text: generatedText,
      config,
      wordCount: generatedText.split(' ').length,
      createdAt: new Date()
    };

  } catch (error) {
    logger.error('Failed to generate training text:', error);
    throw new Error(`Text generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

/**
 * Build prompt for text generation
 */
const buildTextGenerationPrompt = (config: Required<Omit<TextConfig, 'mustUseWords' | 'grammarTopics'>> & { mustUseWords: string[]; grammarTopics: string[] }): string => {
  const {
    minWords,
    maxWords,
    difficulty,
    sourceLanguage,
    targetLanguage,
    mustUseWords,
    grammarTopics,
    topic
  } = config;

  const languageNames = {
    spanish: 'Spanish',
    english: 'English',
    portuguese: 'Portuguese'
  };

  let prompt = `Generate a ${languageNames[sourceLanguage]} text for translation practice with the following requirements:

- Word count: between ${minWords} and ${maxWords} words
- Difficulty level: ${difficulty}
- Topic: ${topic}
- The text will be translated FROM ${languageNames[sourceLanguage]} TO ${languageNames[targetLanguage]}`;

  if (mustUseWords.length > 0) {
    prompt += `\n- Must include these words: ${mustUseWords.join(', ')}`;
  }

  if (grammarTopics.length > 0) {
    prompt += `\n- Focus on these grammar topics: ${grammarTopics.join(', ')}`;
  }

  prompt += `\n\nThe text should be:
- Natural and engaging
- Appropriate for ${difficulty} level learners
- Suitable for translation practice from ${languageNames[sourceLanguage]} to ${languageNames[targetLanguage]}
- Well-structured with proper grammar
- Include varied vocabulary and sentence structures

Only return the generated text in ${languageNames[sourceLanguage]}, no additional comments or explanations.`;

  return prompt;
};
