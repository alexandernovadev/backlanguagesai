openapi: 3.0.0
info:
  title: Expressions API
  version: 1.0.0
  description: API for managing expressions (idioms and phrases)

paths:
  /api/expressions:
    get:
      summary: Get all expressions with pagination and filters
      tags: [Expressions]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search term for expression or definition
        - name: type
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Filter by expression type
        - name: difficulty
          in: query
          schema:
            type: string
            enum: [easy, medium, hard]
          description: Filter by difficulty level
        - name: language
          in: query
          schema:
            type: string
          description: Filter by language
        - name: hasImage
          in: query
          schema:
            type: string
            enum: [true, false]
          description: Filter by whether expression has an image
      responses:
        '200':
          description: List of expressions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExpressions'
    post:
      summary: Create a new expression
      tags: [Expressions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionInput'
      responses:
        '201':
          description: Expression created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expression'

  /api/expressions/generate:
    post:
      summary: Generate an expression using AI
      tags: [Expressions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                  description: The prompt to generate the expression
                  example: "Create an idiom about success"
                options:
                  type: object
                  properties:
                    language:
                      type: string
                      default: "en"
                      description: Language for the generated expression
      responses:
        '200':
          description: Expression generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ExpressionInput'
                  message:
                    type: string
        '400':
          description: Bad request - prompt is required
        '500':
          description: Internal server error

  /api/expressions/{id}:
    get:
      summary: Get expression by ID
      tags: [Expressions]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Expression found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expression'
        '404':
          description: Expression not found
    put:
      summary: Update an expression
      tags: [Expressions]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpressionInput'
      responses:
        '200':
          description: Expression updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expression'
        '404':
          description: Expression not found
    delete:
      summary: Delete an expression
      tags: [Expressions]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Expression deleted successfully
        '404':
          description: Expression not found

  /api/expressions/{expressionId}/chat:
    post:
      summary: Add a chat message to an expression
      tags: [Expressions]
      parameters:
        - name: expressionId
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: The message to add to the chat
      responses:
        '200':
          description: Chat message added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expression'
        '400':
          description: Bad request - message is required
        '404':
          description: Expression not found
    get:
      summary: Get chat history for an expression
      tags: [Expressions]
      parameters:
        - name: expressionId
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Chat history retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '404':
          description: Expression not found
    delete:
      summary: Clear chat history for an expression
      tags: [Expressions]
      parameters:
        - name: expressionId
          in: path
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Chat history cleared successfully
        '404':
          description: Expression not found

  /api/expressions/by-type/{type}:
    get:
      summary: Get expressions by type
      tags: [Expressions]
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Expression type
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Maximum number of expressions to return
        - name: search
          in: query
          schema:
            type: string
          description: Search term
      responses:
        '200':
          description: List of expressions by type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expression'

  /api/expressions/expressions-only:
    get:
      summary: Get only expression names (for performance)
      tags: [Expressions]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search term
      responses:
        '200':
          description: List of expression names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedExpressionNames'

  /api/expressions/{expression}/expression:
    get:
      summary: Find expression by expression text
      tags: [Expressions]
      parameters:
        - name: expression
          in: path
          required: true
          schema:
            type: string
          description: Expression text to search for
      responses:
        '200':
          description: Expression found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expression'
        '404':
          description: Expression not found

  /api/expressions/export/json:
    get:
      summary: Export all expressions to JSON
      tags: [Expressions]
      responses:
        '200':
          description: Expressions exported successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expression'

  /api/expressions/import/json:
    post:
      summary: Import expressions from JSON file
      tags: [Expressions]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file with expressions array
      responses:
        '200':
          description: Expressions imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  imported:
                    type: integer
                  expressions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expression'
        '400':
          description: Bad request - invalid file format

components:
  schemas:
    Expression:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier
        expression:
          type: string
          description: The expression text
          example: "Break a leg"
        definition:
          type: string
          description: Definition of the expression
          example: "Good luck"
        examples:
          type: array
          items:
            type: string
          description: Example sentences using the expression
          example: ["I hope you break a leg in your audition!", "Break a leg on your exam!"]
        type:
          type: array
          items:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Types of the expression
          example: ["idiom"]
        context:
          type: string
          description: Context about when to use the expression
          example: "Informal, encouraging"
        difficulty:
          type: string
          enum: [easy, medium, hard]
          description: Difficulty level
          example: "medium"
        img:
          type: string
          description: URL of the expression image
        language:
          type: string
          description: Language of the expression
          example: "en"
        spanish:
          type: object
          properties:
            definition:
              type: string
              description: Spanish translation of the definition
              example: "Buena suerte"
            expression:
              type: string
              description: Spanish equivalent of the expression
              example: "¡Que tengas suerte!"
        chat:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: Chat history with GPT
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ExpressionInput:
      type: object
      required:
        - expression
        - definition
        - language
      properties:
        expression:
          type: string
          minLength: 1
          maxLength: 200
          description: The expression text
        definition:
          type: string
          minLength: 5
          maxLength: 1000
          description: Definition of the expression
        examples:
          type: array
          items:
            type: string
          description: Example sentences
        type:
          type: array
          items:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Types of the expression
        context:
          type: string
          maxLength: 500
          description: Context about when to use the expression
        img:
          type: string
          description: URL of the expression image
        difficulty:
          type: string
          enum: [easy, medium, hard]
          default: hard
          description: Difficulty level
        language:
          type: string
          description: Language of the expression
        spanish:
          type: object
          properties:
            definition:
              type: string
              minLength: 5
              maxLength: 1000
              description: Spanish translation of the definition
            expression:
              type: string
              minLength: 1
              maxLength: 200
              description: Spanish equivalent of the expression

    ChatMessage:
      type: object
      properties:
        id:
          type: string
          description: Unique message identifier
        role:
          type: string
          enum: [user, assistant]
          description: Role of the message sender
        content:
          type: string
          description: Message content
        timestamp:
          type: string
          format: date-time
          description: Message timestamp

    PaginatedExpressions:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Expression'
        total:
          type: integer
          description: Total number of expressions
        page:
          type: integer
          description: Current page number
        pages:
          type: integer
          description: Total number of pages

    PaginatedExpressionNames:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              expression:
                type: string
                description: Expression text
        total:
          type: integer
          description: Total number of expressions
        page:
          type: integer
          description: Current page number
        pages:
          type: integer
          description: Total number of pages 