openapi: 3.0.0
info:
  title: Expression API
  version: 1.0.0
  description: API for managing expressions and related properties
paths:
  /api/expressions:
    get:
      summary: Retrieve a list of expressions with pagination and comprehensive filters
      tags:
        - Expressions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of expressions per page
        - in: query
          name: expression
          schema:
            type: string
          description: Filter expressions by partial text match (case insensitive)
        - in: query
          name: definition
          schema:
            type: string
          description: Filter expressions by definition content (case insensitive)
        - in: query
          name: difficulty
          schema:
            type: string
            enum: [easy, medium, hard]
          description: Filter expressions by difficulty level(s). Multiple values separated by commas (e.g., easy,medium)
        - in: query
          name: language
          schema:
            type: string
          description: Filter expressions by language(s). Multiple values separated by commas (e.g., english,spanish)
        - in: query
          name: type
          schema:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Filter expressions by type(s). Multiple values separated by commas (e.g., idiom,phrase)
        - in: query
          name: context
          schema:
            type: string
          description: Filter expressions by context (case insensitive)
        - in: query
          name: hasImage
          schema:
            type: string
            enum: [true, false]
          description: Filter expressions that have or don't have an image
        - in: query
          name: hasExamples
          schema:
            type: string
            enum: [true, false]
          description: Filter expressions that have or don't have examples
        - in: query
          name: spanishExpression
          schema:
            type: string
          description: Filter expressions by Spanish translation (case insensitive)
        - in: query
          name: spanishDefinition
          schema:
            type: string
          description: Filter expressions by Spanish definition (case insensitive)
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
          description: Filter expressions created after this date (ISO 8601 format)
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
          description: Filter expressions created before this date (ISO 8601 format)
        - in: query
          name: updatedAfter
          schema:
            type: string
            format: date-time
          description: Filter expressions updated after this date (ISO 8601 format)
        - in: query
          name: updatedBefore
          schema:
            type: string
            format: date-time
          description: Filter expressions updated before this date (ISO 8601 format)
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, expression, difficulty, language, definition]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order (ascending or descending)
      responses:
        '200':
          description: A paginated list of expressions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Expression'
                  total:
                    type: integer
                    example: 150
                  page:
                    type: integer
                    example: 1
                  pages:
                    type: integer
                    example: 15
        '500':
          description: Internal server error
    post:
      summary: Create a new expression
      tags:
        - Expressions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                expression:
                  type: string
                  example: "Break a leg"
                definition:
                  type: string
                  example: "Good luck"
                examples:
                  type: array
                  items:
                    type: string
                  example: ["Break a leg on your exam!", "Break a leg in your presentation!"]
                type:
                  type: array
                  items:
                    type: string
                    enum: [idiom, phrase, collocation, slang, formal, informal]
                  example: ["idiom"]
                context:
                  type: string
                  example: "Informal, encouraging"
                difficulty:
                  type: string
                  enum: [easy, medium, hard]
                  example: "medium"
                img:
                  type: string
                  example: "https://example.com/image.jpg"
                language:
                  type: string
                  example: "en"
                spanish:
                  type: object
                  properties:
                    expression:
                      type: string
                      example: "¡Buena suerte!"
                    definition:
                      type: string
                      example: "Expresión de deseo de éxito"
              required:
                - expression
                - definition
                - language
      responses:
        '201':
          description: Expression created successfully
        '400':
          description: Validation error

  /api/expressions/{id}:
    get:
      summary: Get an expression by its ID
      tags:
        - Expressions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: An expression object
        '404':
          description: Expression not found
    put:
      summary: Update an entire expression object
      tags:
        - Expressions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Expression ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expression'
      responses:
        '200':
          description: Expression updated successfully
        '404':
          description: Expression not found
    delete:
      summary: Delete an expression by ID
      tags:
        - Expressions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Expression deleted successfully
        '404':
          description: Expression not found

  /api/expressions/{expression}/expression:
    get:
      summary: Find an expression by text (case insensitive)
      tags:
        - Expressions
      parameters:
        - in: path
          name: expression
          required: true
          schema:
            type: string
          description: Expression to search
      responses:
        '200':
          description: Expression object
        '404':
          description: Expression not found

  /api/expressions/by-type/{type}:
    get:
      summary: Get expressions by type
      tags:
        - Expressions
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Type of expression
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of expressions to return
        - in: query
          name: search
          schema:
            type: string
          description: Search term for expressions
      responses:
        '200':
          description: List of expressions by type
        '500':
          description: Internal server error

  /api/expressions/expressions-only:
    get:
      summary: Get only expression names (for performance)
      tags:
        - Expressions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of expressions per page
        - in: query
          name: expression
          schema:
            type: string
          description: Filter expressions by partial text match
        - in: query
          name: difficulty
          schema:
            type: string
            enum: [easy, medium, hard]
          description: Filter by difficulty level
        - in: query
          name: language
          schema:
            type: string
          description: Filter by language
        - in: query
          name: type
          schema:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          description: Filter by type
        - in: query
          name: fields
          schema:
            type: string
            default: "expression"
          description: Fields to return
      responses:
        '200':
          description: Paginated list of expression names
        '500':
          description: Internal server error

  /api/expressions/{expressionId}/chat:
    post:
      summary: Add a chat message to an expression
      tags:
        - Expressions
      parameters:
        - in: path
          name: expressionId
          required: true
          schema:
            type: string
          description: Expression ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Explícame esto más a detalle"
              required:
                - message
      responses:
        '200':
          description: Chat message added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Chat message added successfully"
                  expression:
                    $ref: '#/components/schemas/Expression'
        '400':
          description: Message is required
        '404':
          description: Expression not found
        '500':
          description: Internal server error
    get:
      summary: Get chat history for an expression
      tags:
        - Expressions
      parameters:
        - in: path
          name: expressionId
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Chat history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '500':
          description: Internal server error
    delete:
      summary: Clear chat history for an expression
      tags:
        - Expressions
      parameters:
        - in: path
          name: expressionId
          required: true
          schema:
            type: string
          description: Expression ID
      responses:
        '200':
          description: Chat history cleared successfully
        '404':
          description: Expression not found
        '500':
          description: Internal server error

  /api/expressions/export/json:
    get:
      summary: Export all expressions to JSON file
      tags:
        - Expressions
      description: Downloads a JSON file containing all expressions in the database
      security:
        - BearerAuth: []
      responses:
        '200':
          description: JSON file with all expressions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expression'
        '401':
          description: Unauthorized - Token not provided
        '403':
          description: Forbidden - Invalid token
        '500':
          description: Internal server error

  /api/expressions/import/json:
    post:
      summary: Import expressions from JSON file
      tags:
        - Expressions
      description: Import expressions from a JSON file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing expressions to import
      responses:
        '200':
          description: Import completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Import completed. 10 expressions imported successfully."
                  imported:
                    type: integer
                    example: 10
                  errors:
                    type: integer
                    example: 0
                  errorDetails:
                    type: array
                    items:
                      type: object
                      properties:
                        expression:
                          type: string
                        error:
                          type: string
        '400':
          description: Bad request - Invalid file format
        '500':
          description: Internal server error during import

components:
  schemas:
    Expression:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        expression:
          type: string
          example: "Break a leg"
        definition:
          type: string
          example: "Good luck"
        examples:
          type: array
          items:
            type: string
          example:
            - "Break a leg on your exam!"
            - "Break a leg in your presentation!"
        type:
          type: array
          items:
            type: string
            enum: [idiom, phrase, collocation, slang, formal, informal]
          example: ["idiom"]
        context:
          type: string
          example: "Informal, encouraging"
        difficulty:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        img:
          type: string
          nullable: true
          example: "https://res.cloudinary.com/example/image/upload/v1234567890/break-a-leg.png"
          description: Optional image URL (can be empty or null)
        language:
          type: string
          example: "en"
        spanish:
          type: object
          properties:
            expression:
              type: string
              example: "¡Buena suerte!"
            definition:
              type: string
              example: "Expresión de deseo de éxito"
        chat:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          example: []
        createdAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
      required:
        - expression
        - definition
        - language

    ChatMessage:
      type: object
      properties:
        id:
          type: string
          example: "abc123def"
        role:
          type: string
          enum: [user, assistant]
          example: "user"
        content:
          type: string
          example: "Explícame esto más a detalle"
        timestamp:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
      required:
        - id
        - role
        - content
        - timestamp

tags:
  - name: Expressions
    description: Expression management endpoints 