openapi: 3.0.0
info:
  title: Lecture API
  version: 1.0.0
  description: API for managing lectures and related properties

tags:
  - name: Lectures
    description: Endpoints related to lecture management

paths:
  /api/ai/generate-audio-from-text/{idlecture}:
    post:
      summary: Generate audio and subtitles for a lecture using AI
      tags:
        - AI Generation
      parameters:
        - in: path
          name: idlecture
          required: true
          schema:
            type: string
          description: The ID of the lecture to generate audio and subtitles for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  example: "Learning a new language can be fun and rewarding."
                voice:
                  type: string
                  enum: [nova, alloy, echo, fable, onyx, shimmer]
                  default: "nova"
                  example: "fable"
              required:
                - prompt
      responses:
        "201":
          description: Returns the generated audio and subtitles paths
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Audio and subtitles generated successfully"
                  data:
                    type: object
                    properties:
                      audioPath:
                        type: string
                        example: "/absolute/path/to/public/audios/1713469637492.wav"
                      subtitlesPath:
                        type: string
                        example: "/absolute/path/to/public/audios/1713469637492.srt"
        "400":
          description: Bad request, missing prompt or invalid lecture ID
        "500":
          description: Internal server error while generating audio or subtitles

  /api/lectures:
    get:
      summary: Retrieve a paginated list of lectures
      tags: [Lectures]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of lectures per page
      responses:
        "200":
          description: A paginated list of lectures

    post:
      summary: Create a new lecture
      tags: [Lectures]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: integer
                  example: 45
                level:
                  type: string
                  example: "Intermediate"
                typeWrite:
                  type: string
                  example: "Academic"
                language:
                  type: string
                  example: "English"
                img:
                  type: string
                  example: "https://example.com/lecture-image.jpg"
                content:
                  type: string
                  example: "This is a detailed lecture about modern linguistics."
              required:
                - time
                - level
                - typeWrite
                - language
                - content
      responses:
        "201":
          description: Lecture created successfully
        "400":
          description: Validation error

  /api/lectures/{id}:
    get:
      summary: Get a lecture by its ID
      tags: [Lectures]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Lecture ID
      responses:
        "200":
          description: A lecture object
        "404":
          description: Lecture not found

    put:
      summary: Update a lecture by ID
      tags: [Lectures]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Lecture ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time:
                  type: integer
                  example: 60
                level:
                  type: string
                  example: "Advanced"
                typeWrite:
                  type: string
                  example: "Technical"
                language:
                  type: string
                  example: "French"
                content:
                  type: string
                  example: "An in-depth discussion on AI ethics."
              required:
                - time
                - level
                - typeWrite
                - language
                - content
      responses:
        "200":
          description: Lecture updated successfully
        "404":
          description: Lecture not found

    delete:
      summary: Delete a lecture by ID
      tags: [Lectures]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Lecture ID
      responses:
        "200":
          description: Lecture deleted successfully
        "404":
          description: Lecture not found

  /api/lectures/image/{id}:
    put:
      summary: Update the image of a lecture
      tags: [Lectures]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Lecture ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                img:
                  type: string
                  example: "https://example.com/new-lecture-image.jpg"
              required:
                - img
      responses:
        "200":
          description: Lecture image updated successfully
        "404":
          description: Lecture not found

  /api/lectures/export-json:
    get:
      summary: Export all lectures to JSON file
      tags:
        - Lectures
      description: Downloads a JSON file containing all lectures in the database
      security:
        - BearerAuth: []
      responses:
        '200':
          description: JSON file with all lectures
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Exported 25 lectures successfully"
                  data:
                    type: object
                    properties:
                      totalLectures:
                        type: number
                        example: 25
                      exportDate:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:30:00.000Z"
                      lectures:
                        type: array
                        items:
                          $ref: '#/components/schemas/Lecture'
        '401':
          description: Unauthorized - Token not provided
        '403':
          description: Forbidden - Invalid token
        '500':
          description: Internal server error

  /api/lectures/import-file:
    post:
      summary: Import lectures from JSON file
      tags:
        - Lectures
      description: Import lectures from a JSON file with various duplicate handling strategies
      parameters:
        - in: query
          name: duplicateStrategy
          schema:
            type: string
            enum: [skip, overwrite, error, merge]
            default: skip
          description: Strategy to handle duplicate lectures
        - in: query
          name: validateOnly
          schema:
            type: boolean
            default: false
          description: If true, only validates the file without importing
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of lectures to process in each batch
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing lectures to import
      responses:
        '200':
          description: Import completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Import completed successfully"
                  data:
                    $ref: '#/components/schemas/ImportResult'
        '400':
          description: Bad request - Invalid file format or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid JSON file format"
        '500':
          description: Internal server error during import

components:
  schemas:
    Lecture:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        time:
          type: number
          example: 45
        level:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
          example: "B2"
        typeWrite:
          type: string
          example: "Academic Article"
        language:
          type: string
          example: "en"
        img:
          type: string
          nullable: true
          example: "https://res.cloudinary.com/example/image/upload/v1234567890/lecture.png"
          description: Optional image URL (can be empty or null)
        urlAudio:
          type: string
          nullable: true
          example: "/audios/1713469637492.wav"
          description: Optional audio URL (can be empty or null)
        content:
          type: string
          example: "# The Importance of Renewable Energy\n\nRenewable energy sources are becoming increasingly important..."
        createdAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
      required:
        - time
        - level
        - typeWrite
        - language
        - content

    ImportResult:
      type: object
      properties:
        totalLectures:
          type: integer
          example: 39
        totalBatches:
          type: integer
          example: 4
        totalValid:
          type: integer
          example: 35
        totalInvalid:
          type: integer
          example: 2
        totalDuplicates:
          type: integer
          example: 2
        totalErrors:
          type: integer
          example: 0
        totalInserted:
          type: integer
          example: 33
        totalUpdated:
          type: integer
          example: 2
        totalSkipped:
          type: integer
          example: 4
        batches:
          type: array
          items:
            $ref: '#/components/schemas/BatchResult'
        summary:
          $ref: '#/components/schemas/ImportSummary'

    BatchResult:
      type: object
      properties:
        batchIndex:
          type: integer
          example: 0
        processed:
          type: integer
          example: 10
        valid:
          type: integer
          example: 9
        invalid:
          type: integer
          example: 1
        duplicates:
          type: integer
          example: 0
        errors:
          type: integer
          example: 0
        inserted:
          type: integer
          example: 9
        updated:
          type: integer
          example: 0
        skipped:
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingResult'
          description: Optional detailed results for each lecture in the batch

    ProcessingResult:
      type: object
      properties:
        index:
          type: integer
          example: 0
        lecture:
          $ref: '#/components/schemas/Lecture'
        status:
          type: string
          enum: [valid, invalid, duplicate, error]
          example: "valid"
        validationResult:
          $ref: '#/components/schemas/ValidationResult'
        error:
          type: string
          example: "Database connection error"
        action:
          type: string
          enum: [skipped, inserted, updated, merged]
          example: "inserted"

    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        errors:
          type: array
          items:
            type: string
          example: []
        warnings:
          type: array
          items:
            type: string
          example: ["Content is very long (>10,000 characters)"]

    ImportSummary:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Import completed. 33 inserted, 2 updated, 4 skipped, 0 errors"
        duration:
          type: integer
          example: 1250
