openapi: 3.0.0
info:
  title: Question API
  version: 1.0.0
  description: API for managing questions and related properties
paths:
  /api/questions:
    get:
      summary: Retrieve a list of questions with pagination and comprehensive filters
      tags:
        - Questions
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of questions per page
        - in: query
          name: level
          schema:
            type: string
            enum: [A1, A2, B1, B2, C1, C2]
          description: Filter questions by CEFR level(s). Multiple values separated by commas (e.g., A1,A2,B1)
        - in: query
          name: type
          schema:
            type: string
            enum: [multiple_choice, fill_blank, translate, true_false, writing]
          description: Filter questions by type(s). Multiple values separated by commas (e.g., multiple_choice,fill_blank)
        - in: query
          name: topic
          schema:
            type: string
          description: Filter questions by topic (case insensitive)
        - in: query
          name: tags
          schema:
            type: string
          description: Filter questions by tags. Multiple values separated by commas (e.g., grammar,vocabulary)
        - in: query
          name: difficulty
          schema:
            type: string
          description: Filter by difficulty (1-5) or range (e.g., 1-3, 4-5)
        - in: query
          name: hasMedia
          schema:
            type: string
            enum: [true, false]
          description: Filter questions that have or don't have media (audio, image, video)
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [createdAt, updatedAt, text, level, type, difficulty]
            default: createdAt
          description: Field to sort by
        - in: query
          name: sortOrder
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order (ascending or descending)
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
          description: Filter questions created after this date (ISO 8601 format)
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
          description: Filter questions created before this date (ISO 8601 format)
      responses:
        '200':
          description: A paginated list of questions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Questions retrieved successfully"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Question'
                      total:
                        type: integer
                        example: 150
                      page:
                        type: integer
                        example: 1
                      pages:
                        type: integer
                        example: 15
        '500':
          description: Internal server error
    post:
      summary: Create a new question
      tags:
        - Questions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Question created successfully"
                  data:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Validation error
        '500':
          description: Internal server error

  /api/questions/stats:
    get:
      summary: Get question statistics
      tags:
        - Questions
      responses:
        '200':
          description: Question statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Question statistics retrieved successfully"
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 150
                      byLevel:
                        type: object
                        example:
                          A1: 25
                          A2: 30
                          B1: 35
                      byType:
                        type: object
                        example:
                          multiple_choice: 50
                          fill_blank: 30
                          writing: 20
                      withMedia:
                        type: integer
                        example: 45
        '500':
          description: Internal server error

  /api/questions/{id}:
    get:
      summary: Get a question by ID
      tags:
        - Questions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Question ID
      responses:
        '200':
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Question retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
        '500':
          description: Internal server error
    put:
      summary: Update a question
      tags:
        - Questions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Question ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '200':
          description: Question updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Question updated successfully"
                  data:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Validation error
        '404':
          description: Question not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a question
      tags:
        - Questions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Question ID
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Question deleted successfully"
                  data:
                    $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
        '500':
          description: Internal server error

  /api/questions/level/{level}:
    get:
      summary: Get questions for a specific CEFR level
      tags:
        - Questions
      parameters:
        - in: path
          name: level
          required: true
          schema:
            type: string
            enum: [A1, A2, B1, B2, C1, C2]
          description: CEFR level
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of questions to retrieve
      responses:
        '200':
          description: Questions for level retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Questions for level retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /api/questions/level/{level}/type/{type}:
    get:
      summary: Get questions by level and type
      tags:
        - Questions
      parameters:
        - in: path
          name: level
          required: true
          schema:
            type: string
            enum: [A1, A2, B1, B2, C1, C2]
          description: CEFR level
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [multiple_choice, fill_blank, translate, true_false, writing]
          description: Question type
      responses:
        '200':
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Questions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /api/questions/topic/{topic}:
    get:
      summary: Get questions by topic
      tags:
        - Questions
      parameters:
        - in: path
          name: topic
          required: true
          schema:
            type: string
          description: Topic name
      responses:
        '200':
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Questions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /api/questions/tags/{tags}:
    get:
      summary: Get questions by tags
      tags:
        - Questions
      parameters:
        - in: path
          name: tags
          required: true
          schema:
            type: string
          description: Tags separated by commas (e.g., grammar,vocabulary)
      responses:
        '200':
          description: Questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Questions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /api/questions/random/{level}/{type}:
    get:
      summary: Get random questions for practice
      tags:
        - Questions
      parameters:
        - in: path
          name: level
          required: true
          schema:
            type: string
            enum: [A1, A2, B1, B2, C1, C2]
          description: CEFR level
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [multiple_choice, fill_blank, translate, true_false, writing]
          description: Question type
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          description: Number of random questions to retrieve
      responses:
        '200':
          description: Random questions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Random questions retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

components:
  schemas:
    Question:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        text:
          type: string
          example: "What is the correct form of the verb 'to be' in present tense for 'he'?"
        type:
          type: string
          enum: [multiple_choice, fill_blank, translate, true_false, writing]
          example: "multiple_choice"
        isSingleAnswer:
          type: boolean
          example: true
        level:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
          example: "A1"
        topic:
          type: string
          example: "Present Tense"
        difficulty:
          type: integer
          minimum: 1
          maximum: 5
          example: 2
        options:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                example: "is"
              label:
                type: string
                example: "is"
              isCorrect:
                type: boolean
                example: true
        correctAnswers:
          type: array
          items:
            type: string
          example: ["is"]
        explanation:
          type: string
          example: "The verb 'to be' in present tense for third person singular (he/she/it) is 'is'."
        tags:
          type: array
          items:
            type: string
          example: ["grammar", "present_tense", "verb_to_be"]
        media:
          type: object
          properties:
            audio:
              type: string
              example: "https://example.com/audio.mp3"
            image:
              type: string
              example: "https://example.com/image.jpg"
            video:
              type: string
              example: "https://example.com/video.mp4"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
      required:
        - text
        - type
        - level

    QuestionInput:
      type: object
      properties:
        text:
          type: string
          example: "What is the correct form of the verb 'to be' in present tense for 'he'?"
        type:
          type: string
          enum: [multiple_choice, fill_blank, translate, true_false, writing]
          example: "multiple_choice"
        isSingleAnswer:
          type: boolean
          example: true
        level:
          type: string
          enum: [A1, A2, B1, B2, C1, C2]
          example: "A1"
        topic:
          type: string
          example: "Present Tense"
        difficulty:
          type: integer
          minimum: 1
          maximum: 5
          example: 2
        options:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                example: "is"
              label:
                type: string
                example: "is"
              isCorrect:
                type: boolean
                example: true
        correctAnswers:
          type: array
          items:
            type: string
          example: ["is"]
        explanation:
          type: string
          example: "The verb 'to be' in present tense for third person singular (he/she/it) is 'is'."
        tags:
          type: array
          items:
            type: string
          example: ["grammar", "present_tense", "verb_to_be"]
        media:
          type: object
          properties:
            audio:
              type: string
              example: "https://example.com/audio.mp3"
            image:
              type: string
              example: "https://example.com/image.jpg"
            video:
              type: string
              example: "https://example.com/video.mp4"
      required:
        - text
        - type
        - level 