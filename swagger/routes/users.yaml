openapi: 3.0.0
info:
  title: Users API
  version: 1.0.0
  description: CRUD de usuarios con filtros avanzados y paginación

security:
  - bearerAuth: []

tags:
  - name: Users
    description: Endpoints para gestión de usuarios

paths:
  /api/users:
    get:
      tags: [Users]
      summary: Listar usuarios con filtros y paginación
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10 }
        - in: query
          name: username
          schema: { type: string }
        - in: query
          name: email
          schema: { type: string }
        - in: query
          name: role
          schema: { type: string, example: "admin,user" }
        - in: query
          name: language
          schema: { type: string, example: "en,es" }
        - in: query
          name: isActive
          schema: { type: boolean }
        - in: query
          name: phone
          schema: { type: string }
        - in: query
          name: address
          schema: { type: string }
        - in: query
          name: createdAfter
          schema: { type: string, format: date-time }
        - in: query
          name: createdBefore
          schema: { type: string, format: date-time }
        - in: query
          name: updatedAfter
          schema: { type: string, format: date-time }
        - in: query
          name: updatedBefore
          schema: { type: string, format: date-time }
        - in: query
          name: sortBy
          schema: { type: string, default: "createdAt" }
        - in: query
          name: sortOrder
          schema: { type: string, default: "desc" }
      responses:
        200:
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer
    post:
      tags: [Users]
      summary: Crear usuario
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        201:
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Obtener usuario por ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: [Users]
      summary: Editar usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: [Users]
      summary: Eliminar usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Usuario eliminado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /api/users/{userId}/audit-logs:
    get:
      tags: [Users]
      summary: Obtener logs de auditoría de un usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        200:
          description: Logs de auditoría del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAuditLog'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /api/users/audit-logs/{action}:
    get:
      tags: [Users]
      summary: Obtener logs de auditoría por tipo de acción
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: action
          required: true
          schema: 
            type: string
            enum: [CREATE, UPDATE, DELETE, LOGIN]
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
      responses:
        200:
          description: Logs de auditoría por acción
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAuditLog'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        image:
          type: string
        language:
          type: string
        isActive:
          type: boolean
        address:
          type: string
        phone:
          type: string
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserCreate:
      type: object
      required: [username, email, password, role, language]
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        image:
          type: string
        language:
          type: string
        isActive:
          type: boolean
        address:
          type: string
        phone:
          type: string
    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        image:
          type: string
        language:
          type: string
        isActive:
          type: boolean
        address:
          type: string
        phone:
          type: string 