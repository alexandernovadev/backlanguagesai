openapi: 3.0.0
info:
  title: Word API
  version: 1.0.0
  description: API for managing words and related properties
paths:
  /api/words/get-cards-anki:
    get:
      summary: Retrieve recent hard or medium words for Anki cards
      tags:
        - Words
      responses:
        '200':
          description: A shuffled list of recent hard or medium words
        '500':
          description: Internal server error

  /api/words:
    get:
      summary: Retrieve a list of words with pagination
      tags:
        - Words
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of words per page
        - in: query
          name: wordUser
          schema:
            type: string
          description: Filter words by user
      responses:
        '200':
          description: A paginated list of words
    post:
      summary: Create a new word
      tags:
        - Words
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                meaning:
                  type: string
              required:
                - word
                - meaning
      responses:
        '201':
          description: Word created successfully
        '400':
          description: Validation error

  /api/words/{id}:
    get:
      summary: Get a word by its ID
      tags:
        - Words
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Word ID
      responses:
        '200':
          description: A word object
        '404':
          description: Word not found
    put:
      summary: Update an entire word object
      tags:
        - Words
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Word ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                word:
                  type: string
                meaning:
                  type: string
              required:
                - word
                - meaning
      responses:
        '200':
          description: Word updated successfully
        '404':
          description: Word not found
    delete:
      summary: Delete a word by ID
      tags:
        - Words
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Word ID
      responses:
        '200':
          description: Word deleted successfully
        '404':
          description: Word not found

  /api/words/{id}/increment-seen:
    put:
      summary: Increment the 'seen' count of a word
      tags:
        - Words
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Word ID
      responses:
        '200':
          description: Word seen count incremented successfully
        '404':
          description: Word not found
        '500':
          description: Internal server error

  /api/words/word/{word}:
    get:
      summary: Find a word by name (case insensitive)
      tags:
        - Words
      parameters:
        - in: path
          name: word
          required: true
          schema:
            type: string
          description: Word to search
      responses:
        '200':
          description: Word object
        '404':
          description: Word not found

  /api/words/{id}/level:
    put:
      summary: Update the level of a word
      tags:
        - Words
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Word ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [easy, medium, hard]
              required:
                - level
      responses:
        '200':
          description: Word level updated
        '404':
          description: Word not found

  /api/words/export-json:
    get:
      summary: Export all words to JSON file
      tags:
        - Words
      description: Downloads a JSON file containing all words in the database
      security:
        - BearerAuth: []
      responses:
        '200':
          description: JSON file with all words
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Exported 150 words successfully"
                  data:
                    type: object
                    properties:
                      totalWords:
                        type: number
                        example: 150
                      exportDate:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:30:00.000Z"
                      words:
                        type: array
                        items:
                          $ref: '#/components/schemas/Word'
        '401':
          description: Unauthorized - Token not provided
        '403':
          description: Forbidden - Invalid token
        '500':
          description: Internal server error

  /api/words/import-file:
    post:
      summary: Import words from JSON file
      tags:
        - Words
      description: Import words from a JSON file with various duplicate handling strategies
      parameters:
        - in: query
          name: duplicateStrategy
          schema:
            type: string
            enum: [skip, overwrite, error, merge]
            default: skip
          description: Strategy to handle duplicate words
        - in: query
          name: validateOnly
          schema:
            type: boolean
            default: false
          description: If true, only validates the file without importing
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of words to process in each batch
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing words to import
      responses:
        '200':
          description: Import completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Import completed successfully"
                  data:
                    $ref: '#/components/schemas/ImportResult'
        '400':
          description: Bad request - Invalid file format or parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid JSON file format"
        '500':
          description: Internal server error during import

components:
  schemas:
    Word:
      type: object
      properties:
        _id:
          type: string
          example: "507f1f77bcf86cd799439011"
        word:
          type: string
          example: "challenge"
        definition:
          type: string
          example: "A difficult task or situation that requires effort to overcome."
        examples:
          type: array
          items:
            type: string
          example:
            - "Starting a new job comes with its own set of challenges."
            - "The project presented several challenges."
        type:
          type: array
          items:
            type: string
          example: ["noun", "verb"]
        IPA:
          type: string
          example: "/ˈtʃæl.ɪn.dʒ/"
        seen:
          type: number
          example: 5
        img:
          type: string
          nullable: true
          example: "https://res.cloudinary.com/example/image/upload/v1234567890/challenge.png"
          description: Optional image URL (can be empty or null)
        level:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        sinonyms:
          type: array
          items:
            type: string
          example: ["difficulty", "obstacle", "hurdle"]
        codeSwitching:
          type: array
          items:
            type: string
          example:
            - "Enfrentamos varios challenges al implementar el proyecto."
            - "La vida está llena de challenges que nos ayudan a crecer."
        language:
          type: string
          example: "en"
        spanish:
          type: object
          properties:
            definition:
              type: string
              example: "Situaciones o tareas difíciles que requieren esfuerzo y determinación para superarse."
            word:
              type: string
              example: "desafío"
        createdAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
      required:
        - word
        - definition
        - language

    ImportResult:
      type: object
      properties:
        totalLectures:
          type: integer
          example: 314
        totalBatches:
          type: integer
          example: 32
        totalValid:
          type: integer
          example: 310
        totalInvalid:
          type: integer
          example: 2
        totalDuplicates:
          type: integer
          example: 2
        totalErrors:
          type: integer
          example: 0
        totalInserted:
          type: integer
          example: 308
        totalUpdated:
          type: integer
          example: 2
        totalSkipped:
          type: integer
          example: 4
        batches:
          type: array
          items:
            $ref: '#/components/schemas/BatchResult'
        summary:
          $ref: '#/components/schemas/ImportSummary'

    BatchResult:
      type: object
      properties:
        batchIndex:
          type: integer
          example: 0
        processed:
          type: integer
          example: 10
        valid:
          type: integer
          example: 9
        invalid:
          type: integer
          example: 1
        duplicates:
          type: integer
          example: 0
        errors:
          type: integer
          example: 0
        inserted:
          type: integer
          example: 9
        updated:
          type: integer
          example: 0
        skipped:
          type: integer
          example: 1
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProcessingResult'
          description: Optional detailed results for each word in the batch

    ProcessingResult:
      type: object
      properties:
        index:
          type: integer
          example: 0
        lecture:
          $ref: '#/components/schemas/Word'
        status:
          type: string
          enum: [valid, invalid, duplicate, error]
          example: "valid"
        validationResult:
          $ref: '#/components/schemas/ValidationResult'
        error:
          type: string
          example: "Database connection error"
        action:
          type: string
          enum: [skipped, inserted, updated, merged]
          example: "inserted"

    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        errors:
          type: array
          items:
            type: string
          example: []
        warnings:
          type: array
          items:
            type: string
          example: ["Definition is very long (>1,000 characters)"]

    ImportSummary:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Import completed. 308 inserted, 2 updated, 4 skipped, 0 errors"
        duration:
          type: integer
          example: 1250

tags:
  - name: Words
    description: Word management endpoints
